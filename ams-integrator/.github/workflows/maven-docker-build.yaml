name: Build with maven and push docker image

on:
  push:
    branches:
      - "**"
      - "!master"
    tags:
      - "*.*.*" # Example: name-1.22.33
      - "release-*" # Example: release-20221231

  workflow_dispatch:
    inputs:
      git_branch:
        description: "Branch to build."
        required: true
        default: "develop"
      docker_image_tag:
        description: "Tag for the Docker image, e.g. 1.0.0"
        required: false
      enable_docker_build:
        description: "Enable docker build."
        required: false
        default: "true"

jobs:
  maven_build:
    runs-on: ubuntu-latest

    steps:
      # checkout given input branch, if given
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.git_branch || '' }}

      # setup java and use default maven cache
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "adopt"
          cache: "maven"

      # create maven settings xml file that allows access to the convit GitHub maven artifacts
      # the env vars used are stored as GitHub organization secrets
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v22
        with:
          servers: >
            [
              {
                "id": "github",
                "username": "${env.GITHUB_USER}",
                "password": "${env.GITHUB_TOKEN}"
              },
              {
                "id": "github-snapshots",
                "username": "${env.GITHUB_USER}",
                "password": "${env.GITHUB_TOKEN}"
              },
              {
                "id": "github-releases",
                "username": "${env.GITHUB_USER}",
                "password": "${env.GITHUB_TOKEN}"
              }
            ]
          repositories: >
            [
              {
                "id": "github-releases",
                "name": "github-packages-releases",
                "url": "${env.RELEASE_URL}",
                "releases": {
                  "enabled": "true"
                },
                "snapshots": {
                  "enabled": "false"
                }
              },
              {
                "id": "github-snapshots",
                "name": "github-packages-snapshots",
                "url": "${env.SNAPSHOTS_URL}",
                "releases": {
                  "enabled": "false"
                },
                "snapshots": {
                  "enabled": "true"
                }
              }
            ]
          output_file: ${{ github.workspace }}/settings.xml

      # determine the softwares version number
      - name: Get version numbers
        id: version_numbers
        shell: bash
        run: |
          POM_VERSION=$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout -s ${{ github.workspace }}/settings.xml)
          VERSION_EXTENSION=$(echo "$POM_VERSION" | sed -r 's/[0-9]+.[0-9]+.[0-9]+//' )
          MAJOR_MINOR_VERSION="${POM_VERSION%.*}${VERSION_EXTENSION}"
          MAJOR_VERSION="${POM_VERSION%%.*}${VERSION_EXTENSION}"
          echo "POM version number: $POM_VERSION"
          echo "Version extension: $VERSION_EXTENSION"
          echo "Major and minor version number: $MAJOR_MINOR_VERSION"
          echo "Major version number: $MAJOR_VERSION"
          echo "pom_version=$POM_VERSION" >> $GITHUB_OUTPUT
          echo "version_extension=$VERSION_EXTENSION" >> $GITHUB_OUTPUT
          echo "major_minor_version=$MAJOR_MINOR_VERSION" >> $GITHUB_OUTPUT
          echo "major_version=$MAJOR_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
          RELEASE_URL: ${{ secrets.PACKAGES_MAVEN_URL }}
          SNAPSHOTS_URL: ${{ secrets.PACKAGES_MAVEN_URL }}

      # determine docker image tags based on the github event and inputs
      - name: Get tag name as latest tag (push on tag)
        if: github.ref_type == 'tag' && inputs.docker_image_tag == ''
        shell: bash
        run: echo "GITTAG_TAG=,ghcr.io/${{ github.repository }}:$(echo ${{ github.ref_name }} | tr / -)" >> $GITHUB_ENV

      - name: Set branch-specific latest tag
        if: github.ref_type == 'branch' && inputs.docker_image_tag == ''
        shell: bash
        run: echo "LATEST_TAG=ghcr.io/${{ github.repository }}:$(echo ${{ github.ref_name }} | tr / -)-latest" >> $GITHUB_ENV

      - name: Set numbered banch tag
        if: github.ref_type == 'branch' && inputs.docker_image_tag == ''
        shell: bash
        run: echo "NUMBERED_TAG=,ghcr.io/${{ github.repository }}:$(echo ${{ github.ref_name }} | tr / -)-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Prepare SemVer image tags
        if: github.ref_name == 'develop' && inputs.docker_image_tag == ''
        shell: bash
        run: |
          echo "POM_TAG=,ghcr.io/${{ github.repository }}:${{ steps.version_numbers.outputs.POM_VERSION }}" >> $GITHUB_ENV
          echo "MAJOR_MINOR_TAG=,ghcr.io/${{ github.repository }}:${{ steps.version_numbers.outputs.MAJOR_MINOR_VERSION }}" >> $GITHUB_ENV
          echo "MAJOR_TAG=,ghcr.io/${{ github.repository }}:${{ steps.version_numbers.outputs.MAJOR_VERSION }}" >> $GITHUB_ENV

      - name: Set custom tag
        if: inputs.docker_image_tag != ''
        shell: bash
        run: echo "CUSTOM_TAG=,ghcr.io/${{ github.repository }}:${{ inputs.docker_image_tag }}" >> $GITHUB_ENV

      - name: Concatenate tags
        shell: bash
        run: echo "ALL_TAGS=${{ env.LATEST_TAG }}${{ env.NUMBERED_TAG }}${{ env.POM_TAG }}${{ env.MAJOR_MINOR_TAG }}${{ env.MAJOR_TAG }}${{ env.GITTAG_TAG }}${{ env.CUSTOM_TAG }}" >> $GITHUB_ENV

      # build, test and package with maven
      - name: Build and package with Maven
        run: |
          mvn clean test package -B \
          -Dproject.release.mvnrepo.name=github-releases \
          -Dproject.release.mvnrepo.url=$RELEASE_URL \
          -Dproject.snapshot.mvnrepo.name=github-snapshots \
          -Dproject.snapshot.mvnrepo.url=$SNAPSHOTS_URL \
          -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
          RELEASE_URL: ${{ secrets.PACKAGES_MAVEN_URL }}
          SNAPSHOTS_URL: ${{ secrets.PACKAGES_MAVEN_URL }}

      # build, test and package with maven
      - name: Build and publish docker images
        id: build_docker_image
        run: |
          mvn clean spring-boot:build-image \
          -Dspring-boot.build-image.imageName=${{ env.LATEST_TAG }} \
          -DimageTags=${{ env.ALL_TAGS }} \
          -DskipTests \
          -s $GITHUB_WORKSPACE/settings.xml && \
          echo "docker_image_built=true" >> "$GITHUB_OUTPUT"

        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Publish Docker images
        if: steps.build_docker_image.outputs.docker_image_built == 'true'
        run: |
          echo "Publishing Docker images with tags: ${{ env.ALL_TAGS }}"
          
          IFS=',' read -r -a TAG_ARRAY <<< ${{ env.ALL_TAGS }}
          
          # Loop through each tag and publish it
          for TAG in "${TAG_ARRAY[@]}"; do
            echo "Publishing Docker image with tag: $TAG"
            docker push "$TAG"
            if [ $? -ne 0 ]; then
              echo "Failed to publish tag: $TAG"
              exit 1
            fi
           done

      # publish test results to job summary, commit and pull requets checks and as pull request comment
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: always()
        with:
          junit_files: "**/target/surefire-reports/*.xml"

      # output docker image name and tag in the GitHub job / step summary
      - name: Output Docker image name and tag
        if: steps.build_docker_image.outputs.docker_image_built == 'true'
        run: |
          echo 'Docker Image(s):' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ env.ALL_TAGS }}" | sed 's/,/\n/g' | sed '/^$/d' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
