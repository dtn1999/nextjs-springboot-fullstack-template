/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/{accountId}/verify/government-id": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Verify account's government ID. */
    patch: operations["verifyIdentityByAccountId"];
    trace?: never;
  };
  "/accounts/check-email-uniqueness": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check if an email is unique. */
    post: operations["checkEmailUniqueness"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new account. */
    post: operations["register"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/whoami": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the current user account. */
    get: operations["whoami"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{accountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an account by its internal ID (not the oauth0 user ID) */
    get: operations["findAccountById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update an account by its internal ID (not the oauth0 user ID) */
    patch: operations["updateAccount"];
    trace?: never;
  };
  "/accounts/{accountId}/become-host": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change the role of an account to host. */
    put: operations["makeUserHost"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{accountId}/suspend": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change ban the account with the given ID. */
    put: operations["suspendAccount"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{accountId}/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete the account with the given ID. */
    delete: operations["deleteAccount"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{accountId}/revoke": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Revoke an account. */
    put: operations["revokeAccount"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all registered accounts. */
    get: operations["getAllAccounts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all Profiles */
    get: operations["getAllProfiles"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{profileId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Find profile by Id */
    get: operations["findProfileById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/locations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all addresses. */
    get: operations["findAllRegisteredLocations"];
    put?: never;
    /** Create a new location. */
    post: operations["createLocation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/locations/{locationId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all addresses. */
    get: operations["findLocationById"];
    /** Get all addresses. */
    put: operations["updateLocationById"];
    post?: never;
    /** Get all addresses. */
    delete: operations["deleteLocationById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/listing-types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all listing types. */
    get: operations["findAllListingTypes"];
    put?: never;
    /** Create a new listing type. */
    post: operations["createListingType"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/listing-types/{listingTypeId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get listing type by id. */
    get: operations["findListingTypeById"];
    /** Update listing type by id. */
    put: operations["updateListingTypeById"];
    post?: never;
    /** Delete listing type by id. */
    delete: operations["deleteListingTypeById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/amenities": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all amenities. */
    get: operations["findAllAmenities"];
    put?: never;
    /** Create a new amenity. */
    post: operations["createAmenity"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/amenities/{amenityId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get amenity by id. */
    get: operations["findAmenityById"];
    /** Update amenity by id. */
    put: operations["updateAmenityById"];
    post?: never;
    /** Delete amenity by id. */
    delete: operations["deleteAmenityById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/owners/{ownerId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all listings for account. */
    get: operations["findAllListingsByOwnerId"];
    put?: never;
    /** Create a new listing. */
    post: operations["setupListingForAccountId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get listing by id. */
    get: operations["findListingById"];
    put?: never;
    post?: never;
    /** Delete a listing. */
    delete: operations["deleteListingById"];
    options?: never;
    head?: never;
    /** Update a listing. */
    patch: operations["updateListingById"];
    trace?: never;
  };
  "/listings/{listingId}/publish": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Publish a listing. */
    put: operations["publishListingById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}/verify": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Verify if a listing is publishable. */
    get: operations["istListingPublishable"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}/unlist": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Unpublished a listing. */
    put: operations["unpublishListingById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/book/{listingId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Book a listing for a period of time. */
    post: operations["bookListingById"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}/price": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Book a listing for a period of time. */
    post: operations["computeListingBookingPrice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}/unbook/{bookedAvailabilityId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Book a listing for a period of time. */
    put: operations["unbookListingById"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all listings. */
    get: operations["findAllListings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/listings/{listingId}/availabilities": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the listing of availabilities entry for a given listing and in a given period. */
    get: operations["findAvailabilitiesByListingId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Add availability to a calendar. */
    patch: operations["addAvailabilitiesToCalendar"];
    trace?: never;
  };
  "/listings/{listingId}/availabilities/{availabilityId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** delete an availability from Calendar. */
    delete: operations["removeAvailabilityFromCalendar"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/search/listings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Search for listings. */
    post: operations["searchListings"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/billings/accounts/setup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new Billing Account */
    post: operations["setupBillingAccount"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/billings/accounts/setup/{accountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get client secret to setup billing account */
    get: operations["getStripeClientSecret"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/billings/accounts": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all payment wallets */
    get: operations["findAllBillingAccounts"];
    /** Complete account setup */
    put: operations["completeAccountSetup"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/billings/accounts/{accountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Find payment method by ID */
    get: operations["findBillingAccountById"];
    /** Mark the account with the given Id as default */
    put: operations["markAccountAsDefault"];
    post?: never;
    /** Delete Account By Id */
    delete: operations["deleteById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/inquiries": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Inquiries of the authenticated user */
    get: operations["getAuthenticatedUserInquiries"];
    put?: never;
    /** Create a new Inquiry */
    post: operations["createInquiry"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/inquiries/latest/{listingId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an the latest inquiry <<sent>> by the authenticated user for a listing. This is used to check if the user has already inquired about a listing. */
    get: operations["findLatestSentInquiryByListingId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/inquiries/{inquiryId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an inquiry by Id */
    get: operations["getInquiryById"];
    put?: never;
    post?: never;
    /** Delete an Inquiry */
    delete: operations["deleteInquiryById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/accounts/{accountId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Bookings for given account */
    get: operations["findBookingsByAccountId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Booking(s) */
    get: operations["findBookings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/host/{hostId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Find all the Bookings belonging to a host */
    get: operations["findHostBookings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/{bookingId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Bookings by ID */
    get: operations["findBookingById"];
    /** Update booking state */
    put: operations["updateBookingState"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/{accountId}/{listingId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Creat Booking */
    post: operations["bookListingIdByAccountId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feedbacks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Feedback(s) */
    get: operations["findFeedbacks"];
    put?: never;
    /** Create a new Feedback */
    post: operations["createFeedback"];
    /** Delete a Feedback(s) */
    delete: operations["deleteFeedbacks"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/feedbacks/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Search for feedbacks
     *      */
    post: operations["searchFeedbacks"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/contact/{recipientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Creat a new message between authenticated user and given recipient */
    post: operations["createMessage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all conversations for a user */
    get: operations["findConversationsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversationId}/archive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Archive a conversation */
    patch: operations["archiveConversationById"];
    trace?: never;
  };
  "/conversations/{conversationId}/unarchive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Unarchive a conversation */
    patch: operations["unarchiveConversationById"];
    trace?: never;
  };
  "/conversations/{conversationId}/messages/{recipientId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add a new message in the given conversation */
    post: operations["addMessageToConversation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversationId}/messages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all messages in a conversation */
    get: operations["findMessagesByConversationId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/conversations/{conversationId}/messages/{messageId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a message in a specific conversation */
    delete: operations["deleteMessageById"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @enum {string} */
    AccountStatus: AccountStatus;
    /** @enum {string} */
    AccountRole: AccountRole;
    Account: {
      /** Format: int64 */
      id: number;
      createdAt: string;
      updatedAt: string;
      userId: string;
      role: components["schemas"]["AccountRole"];
      status: components["schemas"]["AccountStatus"];
      personalInformation: components["schemas"]["PersonalInformation"];
      settings: components["schemas"]["Settings"];
      profile: components["schemas"]["Profile"];
    };
    AccountProjection: {
      /** Format: int64 */
      id: number;
      legalName: components["schemas"]["LegalName"];
      profile: components["schemas"]["Profile"];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    PersonalInformation: {
      /** Format: int64 */
      id: number;
      email: string;
      legalName: components["schemas"]["LegalName"];
      phoneNumber: components["schemas"]["PhoneNumber"];
      address: components["schemas"]["AccountAddress"];
      governmentId: components["schemas"]["GovernmentId"];
      emergencyContact: components["schemas"]["EmergencyContact"];
    };
    Settings: {
      global: components["schemas"]["GlobalSettings"];
    };
    GlobalSettings: {
      /** Format: int64 */
      id: number;
      defaultLanguage: string;
      defaultCurrency: string;
      defaultTimeZone: string;
    };
    Profile: {
      /** Format: int64 */
      id: number;
      /** Format: date */
      birthDate: string;
      profilePictureUrl: string;
      about: string;
      showPreviousBookings: boolean;
      isEmailVerified: boolean;
      isPhoneNumberVerified: boolean;
      isGovernmentIdVerified: boolean;
    };
    LegalName: {
      firstName: string;
      lastName: string;
    };
    PhoneNumber: {
      countryCode: string;
      number: string;
    };
    AccountAddress: {
      street: string;
      city: string;
      state: string;
      zipCode: string;
      country: string;
    };
    GovernmentId: {
      idFrontSideImage: string;
      idBackSideImage: string;
      selfieWithIdImage: string;
      /** Format: date-time */
      createdAt: string;
      reason?: string;
      status: components["schemas"]["GovernmentIdStatusEnum"];
    };
    /** @enum {string} */
    GovernmentIdStatusEnum: GovernmentIdStatusEnum;
    EmergencyContact: {
      name: string;
      relationship: string;
      preferredLanguage: string;
      type?: string;
      phoneNumber: components["schemas"]["PhoneNumber"];
      email: string;
    };
    EmailUniquenessResponse: {
      isUnique: boolean;
    };
    RegisterUserRequest: {
      email: string;
      lastName: string;
      firstName: string;
      /** Format: date */
      birthDate: string;
      newsletter: boolean;
    };
    AccountPatchRequest: {
      about?: components["schemas"]["AccountPatchAbout"];
      address?: components["schemas"]["AccountPatchAccountAddress"];
      birthDate?: components["schemas"]["AccountPatchBirthDate"];
      email?: components["schemas"]["AccountPatchEmail"];
      emergencyContact?: components["schemas"]["AccountPatchEmergencyContact"];
      governmentId?: components["schemas"]["AccountPatchGovernmentId"];
      legalName?: components["schemas"]["AccountPatchLegalName"];
      phoneNumber?: components["schemas"]["AccountPatchPhoneNumber"];
      preferredLanguage?: components["schemas"]["AccountPatchPreferredLanguage"];
      preferredCurrency?: components["schemas"]["AccountPatchPreferredCurrency"];
      preferredTimeZone?: components["schemas"]["AccountPatchPreferredTimeZone"];
      profilePictureUrl?: components["schemas"]["AccountPatchProfilePictureUrl"];
      showPastBookings?: components["schemas"]["AccountPatchShowPastBookings"];
    };
    AccountPatchEmail: {
      email: string;
    };
    AccountPatchLegalName: {
      firstName: string;
      lastName: string;
    };
    AccountPatchPhoneNumber: {
      countryCode: string;
      number: string;
    };
    AccountPatchAccountAddress: {
      street: string;
      city: string;
      state: string;
      zipCode: string;
      country: string;
    };
    AccountPatchGovernmentId: {
      idFrontSideImage: string;
      idBackSideImage: string;
      selfieWithIdImage: string;
    };
    AccountPatchEmergencyContact: {
      name: string;
      relationship: string;
      preferredLanguage: string;
      type?: string;
      phoneNumber: components["schemas"]["AccountPatchPhoneNumber"];
      email: string;
    };
    AccountPatchBirthDate: {
      /** Format: date */
      birthDate: string;
    };
    AccountPatchPreferredLanguage: {
      preferredLanguage: string;
    };
    AccountPatchPreferredCurrency: {
      preferredCurrency: string;
    };
    AccountPatchPreferredTimeZone: {
      preferredTimeZone: string;
    };
    AccountPatchProfilePictureUrl: {
      profilePictureUrl: string;
    };
    AccountPatchAbout: {
      about: string;
    };
    AccountPatchShowPastBookings: {
      showPastBooking: boolean;
    };
    IdentityVerificationResponse: {
      status: components["schemas"]["GovernmentIdStatusEnum"];
    };
    /** @enum {string} */
    ListingState: ListingState;
    /** @enum {string} */
    CalendarType: CalendarType;
    /** @enum {string} */
    AvailabilityState: AvailabilityState;
    Listing: {
      /** Format: int64 */
      id: number;
      createdAt: string;
      updatedAt: string;
      /** Format: int64 */
      ownerId: number;
      owner: components["schemas"]["Account"];
      state: components["schemas"]["ListingState"];
      title?: string;
      description?: string;
      /** Format: int64 */
      guestCount?: number;
      /** Format: int64 */
      bedroomCount?: number;
      /** Format: int64 */
      bedCount?: number;
      /** Format: int64 */
      bathroomCount?: number;
      /** Format: int64 */
      price?: number;
      type?: components["schemas"]["ListingType"];
      calendar?: components["schemas"]["Calendar"];
      connectedCalendars?: components["schemas"]["Calendar"][];
      address?: components["schemas"]["ListingAddress"];
      location?: components["schemas"]["Location"];
      amenities?: components["schemas"]["Amenity"][];
      photos?: components["schemas"]["ListingPhoto"][];
    };
    Calendar: {
      /** Format: int64 */
      id: number;
      name: string;
      type: components["schemas"]["CalendarType"];
      availabilities: components["schemas"]["Availability"][];
    };
    Availability: {
      /** Format: int64 */
      id: number;
      calendar: components["schemas"]["Calendar"];
      /** Format: date */
      from: string;
      /** Format: date */
      to: string;
      state: components["schemas"]["AvailabilityState"];
    };
    AvailabilityOptions: {
      /** Format: int64 */
      price: number;
      privateNotes: string;
    };
    ListingAddress: {
      /** Format: int64 */
      id: number;
      country: string;
      state: string;
      city: string;
      street?: string;
      zipCode?: string;
      quarter?: string;
      addressHint?: string;
    };
    Location: {
      /** Format: int64 */
      id: number;
      /** Format: double */
      lat?: number;
      /** Format: double */
      lng?: number;
      country: string;
      city: string;
      monumentImageUrl?: string;
    };
    Amenity: {
      /** Format: int64 */
      id?: number;
      name: string;
      category: string;
      description: string;
      icon: string;
    };
    ListingType: {
      /** Format: int64 */
      id?: number;
      name: string;
      description: string;
      icon: string;
    };
    ListingPhoto: {
      /** Format: int64 */
      id: number;
      url: string;
      externalId: string;
      /** Format: int32 */
      position: number;
    };
    ListingProjection: {
      title: string;
      description: string;
      address: components["schemas"]["ListingAddress"];
      photos: components["schemas"]["ListingPhoto"][];
    };
    ListingPatchRequest: {
      title?: components["schemas"]["ListingPatchTitle"];
      description?: components["schemas"]["ListingPatchDescription"];
      price?: components["schemas"]["ListingPatchPrice"];
      type?: components["schemas"]["ListingPatchType"];
      floorPlan?: components["schemas"]["ListingPatchFloorPlan"];
      address?: components["schemas"]["ListingPatchAddress"];
      location?: components["schemas"]["ListingPatchLocation"];
      amenities?: components["schemas"]["ListingPatchAmenities"];
      photos?: components["schemas"]["ListingPatchPhotos"];
    };
    ListingPatchTitle: {
      title: string;
    };
    ListingPatchDescription: {
      description: string;
    };
    ListingPatchPrice: {
      /** Format: int64 */
      amount: number;
      currency?: string;
    };
    ListingPatchType: {
      /** Format: int64 */
      typeId: number;
    };
    ListingPatchFloorPlan: {
      /** Format: int64 */
      guestCount: number;
      /** Format: int64 */
      bedroomCount: number;
      /** Format: int64 */
      bedCount: number;
      /** Format: int64 */
      bathroomCount: number;
    };
    ListingPatchAddress: {
      country: string;
      city: string;
      state?: string;
      street?: string;
      zipCode?: string;
      quarter?: string;
      addressHint?: string;
    };
    ListingPatchLocation: {
      /** Format: int64 */
      id?: number;
      /** Format: double */
      lat: number;
      /** Format: double */
      lng: number;
    };
    ListingPatchAmenities: {
      amenities: number[];
    };
    ListingPatchPhotos: {
      photos: components["schemas"]["ListingPatchPhoto"][];
    };
    ListingPatchPhoto: {
      url: string;
      /** Format: int32 */
      position: number;
      externalId: string;
    };
    /** @enum {string} */
    SortDirection: SortDirection;
    UnlistListingRequest: {
      /** Format: date */
      from: string;
      /** Format: date */
      to: string;
    };
    SearchListingQuery: {
      /** Format: date */
      checkin: string;
      /** Format: date */
      checkout: string;
      guests: components["schemas"]["IntegerRange"];
      bedRooms: components["schemas"]["IntegerRange"];
      beds: components["schemas"]["IntegerRange"];
      price: components["schemas"]["LongRange"];
      /** Format: int64 */
      placeId: number;
      types: number[];
      amenities: number[];
      /** Format: int64 */
      limit: number;
      /** Format: int64 */
      startFrom: number;
    };
    LongRange: {
      /** Format: int64 */
      min: number;
      /** Format: int64 */
      max: number;
    };
    IntegerRange: {
      /** Format: int32 */
      min: number;
      /** Format: int32 */
      max: number;
    };
    CreateAvailabilityRequest: {
      /** Format: date */
      from: string;
      /** Format: date */
      to: string;
      options?: components["schemas"]["AvailabilityOptions"];
    };
    CreateLocationRequest: {
      /** Format: double */
      lat?: number;
      /** Format: double */
      lng?: number;
      country: string;
      city: string;
      monumentImageUrl?: string;
    };
    BookListingRequest: {
      /** Format: date */
      from: string;
      /** Format: date */
      to: string;
    };
    ListingBookingResponse: {
      /** Format: int64 */
      bookedAvailabilityId: number;
    };
    ListingBookingPrice: {
      /** Format: int64 */
      price: number;
      currency: string;
    };
    /** @enum {string} */
    PaymentMethod: PaymentMethod;
    PaymentAccount: {
      /** Format: int64 */
      id: number;
      method: components["schemas"]["PaymentMethod"];
      isDefault: boolean;
      description: string;
      details: components["schemas"]["PaymentAccountDetails"];
    };
    PaymentAccountDetails: {
      method: components["schemas"]["PaymentMethod"];
    };
    PaypalDetails: Omit<
      components["schemas"]["PaymentAccountDetails"],
      "method"
    > & {
      maskedEmail?: string;
    } & {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      method: PaypalDetailsMethod;
    };
    CardDetails: Omit<
      components["schemas"]["PaymentAccountDetails"],
      "method"
    > & {
      brand: string;
      last4: string;
      expiry: string;
      isExpired: boolean;
    } & {
      /**
       * @description discriminator enum property added by openapi-typescript
       * @enum {string}
       */
      method: CardDetailsMethod;
    };
    StartFuturePaymentSessionResponse: {
      clientSecret: string;
    };
    CreateBillingAccountRequest: {
      method: components["schemas"]["PaymentMethod"];
      callbackUrl?: string;
      /** @default Dummy description. */
      description: string;
    };
    /** @enum {string} */
    UpdateBookingAction: UpdateBookingAction;
    /** @enum {string} */
    BookingStatus: BookingStatus;
    BookingDetails: {
      /** Format: int64 */
      paymentAccountId: number;
      note: string;
      /** Format: date */
      checkin: string;
      /** Format: date */
      checkout: string;
    };
    CreateInquiryRequest: {
      message: string;
      /** Format: date */
      checkin: string;
      /** Format: date */
      checkout: string;
      /** Format: int64 */
      listingId: number;
    };
    Inquiry: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      deleted: boolean;
      message: string;
      /** Format: date */
      checkin: string;
      /** Format: date */
      checkout: string;
      listing: components["schemas"]["Listing"];
      initiator: components["schemas"]["AccountProjection"];
      status: components["schemas"]["InquiryStatusEnum"];
      /** Format: int64 */
      conversationId?: number;
    };
    /** @enum {string} */
    InquiryStatusEnum: InquiryStatusEnum;
    Booking: {
      /** Format: int64 */
      id: number;
      bookingStatus: components["schemas"]["BookingStatus"];
      /** Format: int32 */
      guestCount: number;
      /** Format: int64 */
      amount: number;
      /** Format: int64 */
      listingId: number;
      /** Format: date */
      checkin: string;
      /** Format: date */
      checkout: string;
      /** Format: int64 */
      userId: number;
      listing: components["schemas"]["Listing"];
      host: components["schemas"]["AccountProjection"];
    };
    /** @enum {string} */
    FeedbackType: FeedbackType;
    /** @enum {string} */
    EntityType: EntityType;
    /** @enum {string} */
    ReportStatus: ReportStatus;
    CreateFeedbackRequest: {
      type: components["schemas"]["FeedbackType"];
      /** Format: date-time */
      submitted_at: string;
      to_entity_type?: components["schemas"]["EntityType"];
      /** Format: int64 */
      to_entity_id?: number;
      /** Format: int64 */
      by_user_id: number;
      feedback: string;
      details?:
        | components["schemas"]["ReviewRequest"]
        | components["schemas"]["ReportRequest"];
    };
    ReviewRequest: {
      /** Format: int32 */
      cleanliness: number;
      /** Format: int32 */
      communication: number;
      /** Format: int32 */
      check_in: number;
      /** Format: int32 */
      accuracy: number;
      /** Format: int32 */
      location: number;
      /** Format: int32 */
      value: number;
    };
    ReportRequest: {
      reason: string;
    };
    FeedbackSearchRequest: {
      /** Format: int64 */
      feedback_id: number;
      /** Format: int64 */
      by_user_id: number;
      /** Format: int64 */
      to_entity_id: number;
      feedback_type: components["schemas"]["FeedbackType"];
      entity_type: components["schemas"]["EntityType"];
    };
    Feedback: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      submitted_at: string;
      type: components["schemas"]["FeedbackType"];
      to_entity_type: components["schemas"]["EntityType"];
      /** Format: int64 */
      to_entity_id: number;
      /** Format: int64 */
      by_user_id: number;
      feedback: string;
    };
    Review: components["schemas"]["Feedback"] & {
      /** Format: int32 */
      cleanliness: number;
      /** Format: int32 */
      communication: number;
      /** Format: int32 */
      check_in: number;
      /** Format: int32 */
      accuracy: number;
      /** Format: int32 */
      location: number;
      /** Format: int32 */
      value: number;
    };
    Report: components["schemas"]["Feedback"] & {
      reason: string;
      status: components["schemas"]["ReportStatus"];
    };
    /** @enum {string} */
    ConversationTypeEnum: ConversationTypeEnum;
    Conversation: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
      /** Format: int32 */
      unreadCount?: number;
      lastMessageContent?: string;
      user: components["schemas"]["AccountProjection"];
      context: components["schemas"]["ConversationContext"];
      conversationType: components["schemas"]["ConversationTypeEnum"];
    };
    Message: {
      /** Format: int64 */
      id: number;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt: string;
      sender: components["schemas"]["AccountProjection"];
      recipient: components["schemas"]["AccountProjection"];
      content: string;
      conversation: components["schemas"]["Conversation"];
      attachmentUrls?: string[];
    };
    ConversationContext: {
      booking: components["schemas"]["Booking"];
    };
    CreateMessageRequest: {
      content: string;
      context?: components["schemas"]["CreateMessageContext"];
      conversationType?: components["schemas"]["ConversationTypeEnum"];
      attachmentUrls?: string[];
    };
    CreateMessageContext: {
      type: components["schemas"]["MessageContextTypeEnum"];
      /** Format: int64 */
      resourceId: number;
    };
    /** @enum {string} */
    MessageContextTypeEnum: MessageContextTypeEnum;
    ProblemDetail: {
      type: string;
      title: string;
      /** Format: int32 */
      status: number;
      detail: string;
      instance: string;
      violations?: Record<string, never>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaAccountStatus = components["schemas"]["AccountStatus"];
export type SchemaAccountRole = components["schemas"]["AccountRole"];
export type SchemaAccount = components["schemas"]["Account"];
export type SchemaAccountProjection =
  components["schemas"]["AccountProjection"];
export type SchemaPersonalInformation =
  components["schemas"]["PersonalInformation"];
export type SchemaSettings = components["schemas"]["Settings"];
export type SchemaGlobalSettings = components["schemas"]["GlobalSettings"];
export type SchemaProfile = components["schemas"]["Profile"];
export type SchemaLegalName = components["schemas"]["LegalName"];
export type SchemaPhoneNumber = components["schemas"]["PhoneNumber"];
export type SchemaAccountAddress = components["schemas"]["AccountAddress"];
export type SchemaGovernmentId = components["schemas"]["GovernmentId"];
export type SchemaGovernmentIdStatusEnum =
  components["schemas"]["GovernmentIdStatusEnum"];
export type SchemaEmergencyContact = components["schemas"]["EmergencyContact"];
export type SchemaEmailUniquenessResponse =
  components["schemas"]["EmailUniquenessResponse"];
export type SchemaRegisterUserRequest =
  components["schemas"]["RegisterUserRequest"];
export type SchemaAccountPatchRequest =
  components["schemas"]["AccountPatchRequest"];
export type SchemaAccountPatchEmail =
  components["schemas"]["AccountPatchEmail"];
export type SchemaAccountPatchLegalName =
  components["schemas"]["AccountPatchLegalName"];
export type SchemaAccountPatchPhoneNumber =
  components["schemas"]["AccountPatchPhoneNumber"];
export type SchemaAccountPatchAccountAddress =
  components["schemas"]["AccountPatchAccountAddress"];
export type SchemaAccountPatchGovernmentId =
  components["schemas"]["AccountPatchGovernmentId"];
export type SchemaAccountPatchEmergencyContact =
  components["schemas"]["AccountPatchEmergencyContact"];
export type SchemaAccountPatchBirthDate =
  components["schemas"]["AccountPatchBirthDate"];
export type SchemaAccountPatchPreferredLanguage =
  components["schemas"]["AccountPatchPreferredLanguage"];
export type SchemaAccountPatchPreferredCurrency =
  components["schemas"]["AccountPatchPreferredCurrency"];
export type SchemaAccountPatchPreferredTimeZone =
  components["schemas"]["AccountPatchPreferredTimeZone"];
export type SchemaAccountPatchProfilePictureUrl =
  components["schemas"]["AccountPatchProfilePictureUrl"];
export type SchemaAccountPatchAbout =
  components["schemas"]["AccountPatchAbout"];
export type SchemaAccountPatchShowPastBookings =
  components["schemas"]["AccountPatchShowPastBookings"];
export type SchemaIdentityVerificationResponse =
  components["schemas"]["IdentityVerificationResponse"];
export type SchemaListingState = components["schemas"]["ListingState"];
export type SchemaCalendarType = components["schemas"]["CalendarType"];
export type SchemaAvailabilityState =
  components["schemas"]["AvailabilityState"];
export type SchemaListing = components["schemas"]["Listing"];
export type SchemaCalendar = components["schemas"]["Calendar"];
export type SchemaAvailability = components["schemas"]["Availability"];
export type SchemaAvailabilityOptions =
  components["schemas"]["AvailabilityOptions"];
export type SchemaListingAddress = components["schemas"]["ListingAddress"];
export type SchemaLocation = components["schemas"]["Location"];
export type SchemaAmenity = components["schemas"]["Amenity"];
export type SchemaListingType = components["schemas"]["ListingType"];
export type SchemaListingPhoto = components["schemas"]["ListingPhoto"];
export type SchemaListingProjection =
  components["schemas"]["ListingProjection"];
export type SchemaListingPatchRequest =
  components["schemas"]["ListingPatchRequest"];
export type SchemaListingPatchTitle =
  components["schemas"]["ListingPatchTitle"];
export type SchemaListingPatchDescription =
  components["schemas"]["ListingPatchDescription"];
export type SchemaListingPatchPrice =
  components["schemas"]["ListingPatchPrice"];
export type SchemaListingPatchType = components["schemas"]["ListingPatchType"];
export type SchemaListingPatchFloorPlan =
  components["schemas"]["ListingPatchFloorPlan"];
export type SchemaListingPatchAddress =
  components["schemas"]["ListingPatchAddress"];
export type SchemaListingPatchLocation =
  components["schemas"]["ListingPatchLocation"];
export type SchemaListingPatchAmenities =
  components["schemas"]["ListingPatchAmenities"];
export type SchemaListingPatchPhotos =
  components["schemas"]["ListingPatchPhotos"];
export type SchemaListingPatchPhoto =
  components["schemas"]["ListingPatchPhoto"];
export type SchemaSortDirection = components["schemas"]["SortDirection"];
export type SchemaUnlistListingRequest =
  components["schemas"]["UnlistListingRequest"];
export type SchemaSearchListingQuery =
  components["schemas"]["SearchListingQuery"];
export type SchemaLongRange = components["schemas"]["LongRange"];
export type SchemaIntegerRange = components["schemas"]["IntegerRange"];
export type SchemaCreateAvailabilityRequest =
  components["schemas"]["CreateAvailabilityRequest"];
export type SchemaCreateLocationRequest =
  components["schemas"]["CreateLocationRequest"];
export type SchemaBookListingRequest =
  components["schemas"]["BookListingRequest"];
export type SchemaListingBookingResponse =
  components["schemas"]["ListingBookingResponse"];
export type SchemaListingBookingPrice =
  components["schemas"]["ListingBookingPrice"];
export type SchemaPaymentMethod = components["schemas"]["PaymentMethod"];
export type SchemaPaymentAccount = components["schemas"]["PaymentAccount"];
export type SchemaPaymentAccountDetails =
  components["schemas"]["PaymentAccountDetails"];
export type SchemaPaypalDetails = components["schemas"]["PaypalDetails"];
export type SchemaCardDetails = components["schemas"]["CardDetails"];
export type SchemaStartFuturePaymentSessionResponse =
  components["schemas"]["StartFuturePaymentSessionResponse"];
export type SchemaCreateBillingAccountRequest =
  components["schemas"]["CreateBillingAccountRequest"];
export type SchemaUpdateBookingAction =
  components["schemas"]["UpdateBookingAction"];
export type SchemaBookingStatus = components["schemas"]["BookingStatus"];
export type SchemaBookingDetails = components["schemas"]["BookingDetails"];
export type SchemaCreateInquiryRequest =
  components["schemas"]["CreateInquiryRequest"];
export type SchemaInquiry = components["schemas"]["Inquiry"];
export type SchemaInquiryStatusEnum =
  components["schemas"]["InquiryStatusEnum"];
export type SchemaBooking = components["schemas"]["Booking"];
export type SchemaFeedbackType = components["schemas"]["FeedbackType"];
export type SchemaEntityType = components["schemas"]["EntityType"];
export type SchemaReportStatus = components["schemas"]["ReportStatus"];
export type SchemaCreateFeedbackRequest =
  components["schemas"]["CreateFeedbackRequest"];
export type SchemaReviewRequest = components["schemas"]["ReviewRequest"];
export type SchemaReportRequest = components["schemas"]["ReportRequest"];
export type SchemaFeedbackSearchRequest =
  components["schemas"]["FeedbackSearchRequest"];
export type SchemaFeedback = components["schemas"]["Feedback"];
export type SchemaReview = components["schemas"]["Review"];
export type SchemaReport = components["schemas"]["Report"];
export type SchemaConversationTypeEnum =
  components["schemas"]["ConversationTypeEnum"];
export type SchemaConversation = components["schemas"]["Conversation"];
export type SchemaMessage = components["schemas"]["Message"];
export type SchemaConversationContext =
  components["schemas"]["ConversationContext"];
export type SchemaCreateMessageRequest =
  components["schemas"]["CreateMessageRequest"];
export type SchemaCreateMessageContext =
  components["schemas"]["CreateMessageContext"];
export type SchemaMessageContextTypeEnum =
  components["schemas"]["MessageContextTypeEnum"];
export type SchemaProblemDetail = components["schemas"]["ProblemDetail"];
export type $defs = Record<string, never>;
export interface operations {
  verifyIdentityByAccountId: {
    parameters: {
      query: {
        status: components["schemas"]["GovernmentIdStatusEnum"];
        rejectionReason?: string;
      };
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Verification result */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["IdentityVerificationResponse"];
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  checkEmailUniqueness: {
    parameters: {
      query: {
        email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Boolean response indicating if the email is unique or not. True if unique, false otherwise. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EmailUniquenessResponse"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description The fields of the account that need to be updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterUserRequest"];
      };
    };
    responses: {
      /** @description Create and setup a new account for the authenticated user making the request. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  whoami: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get the current user account. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAccountById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Account associated with the given ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateAccount: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    /** @description The fields of the account that need to be updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountPatchRequest"];
      };
    };
    responses: {
      /** @description The updated account */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  makeUserHost: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  suspendAccount: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteAccount: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  revokeAccount: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The updated account */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  getAllAccounts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The updated account */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Account"][];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  getAllProfiles: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of available profiles */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"][];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findProfileById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        profileId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Profile with the Id given in reques path */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description No Profile with the ID passed in request path was found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllRegisteredLocations: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of registered locations */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Location"][];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createLocation: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Location */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLocationRequest"];
      };
    };
    responses: {
      /** @description Created Location with Id, and timestamp information */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      /** @description Request body is invalid */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to create location */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findLocationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        locationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Location with given Id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      /** @description Location with given Id not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateLocationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        locationId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateLocationRequest"];
      };
    };
    responses: {
      /** @description Update Location with given Id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Location"];
        };
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Location with given Id not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteLocationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        locationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Location with given Id not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllListingTypes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of listing types */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingType"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createListingType: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ListingType */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListingType"];
      };
    };
    responses: {
      /** @description Created ListingType with Id, and timestamp information */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingType"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to create listing type */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findListingTypeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ListingType Id */
        listingTypeId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ListingType with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingType"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing type not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateListingTypeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ListingType Id */
        listingTypeId: number;
      };
      cookie?: never;
    };
    /** @description ListingType */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListingType"];
      };
    };
    responses: {
      /** @description Updated ListingType with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingType"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to update listing type */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing type not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteListingTypeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ListingType Id */
        listingTypeId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted ListingType with Id, and timestamp information */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to delete listing type */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing type not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllAmenities: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of amenities */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Amenity"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createAmenity: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Amenity */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Amenity"];
      };
    };
    responses: {
      /** @description Created Amenity with Id, and timestamp information */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Amenity"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to create amenity */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAmenityById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Amenity Id */
        amenityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Amenity with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Amenity"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Amenity not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateAmenityById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Amenity Id */
        amenityId: number;
      };
      cookie?: never;
    };
    /** @description Amenity */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Amenity"];
      };
    };
    responses: {
      /** @description Updated Amenity with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Amenity"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to update amenity */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Amenity not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteAmenityById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Amenity Id */
        amenityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted Amenity with Id, and timestamp information */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to delete amenity */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Amenity not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllListingsByOwnerId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Account Id */
        ownerId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of listings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to get listings for account */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Account not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  setupListingForAccountId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Account Id */
        ownerId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Created Listing with Id, and timestamp information */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Listing with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deleted Listing with Id, and timestamp information */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    /** @description ListingPatchRequest */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListingPatchRequest"];
      };
    };
    responses: {
      /** @description Updated Listing with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  publishListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Published Listing with Id, and timestamp information */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to publish listing */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  istListingPublishable: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Boolean response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": boolean;
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to publish listing */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Listing not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  unpublishListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    /** @description Information about how long the listing will remain unlisted */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UnlistListingRequest"];
      };
    };
    responses: {
      /** @description the unpublished listing */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to unpublished listing */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  bookListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    /** @description Period of time to book */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookListingRequest"];
      };
    };
    responses: {
      /** @description Booking response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingBookingResponse"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  computeListingBookingPrice: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    /** @description Period of time to book */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BookListingRequest"];
      };
    };
    responses: {
      /** @description Booking Price */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListingBookingPrice"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  unbookListingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
        /** @description Booked Availability Id */
        bookedAvailabilityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the booked slot */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllListings: {
    parameters: {
      query?: {
        query?: components["schemas"]["SearchListingQuery"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of listings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAvailabilitiesByListingId: {
    parameters: {
      query: {
        /** @description Start date of a given period */
        start: string;
        /** @description End date of a given period */
        end: string;
      };
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The List of availabilities */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Availability"][];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  addAvailabilitiesToCalendar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
        /** @description Calendar Id */
        calendarId: number;
      };
      cookie?: never;
    };
    /** @description List of availabilities */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAvailabilityRequest"];
      };
    };
    responses: {
      /** @description the Calendar with the added availabilities */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Calendar"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to unpublished listing */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  removeAvailabilityFromCalendar: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Listing Id */
        listingId: number;
        /** @description Calendar Id */
        calendarId: number;
        /** @description Availability Id */
        availabilityId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description the Calendar without the removed availability */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Calendar"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not allowed to unpublished listing */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  searchListings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Search criteria */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SearchListingQuery"];
      };
    };
    responses: {
      /** @description List of listings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Listing"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  setupBillingAccount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBillingAccountRequest"];
      };
    };
    responses: {
      /** @description Payment method created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StartFuturePaymentSessionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  getStripeClientSecret: {
    parameters: {
      query?: {
        callbackUrl?: string;
      };
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Payment method created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["StartFuturePaymentSessionResponse"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findAllBillingAccounts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Payment method */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAccount"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Payment method not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  completeAccountSetup: {
    parameters: {
      query: {
        state: string;
        sessionId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Payment method created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAccount"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findBillingAccountById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Payment method created */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PaymentAccount"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Payment method not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  markAccountAsDefault: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Payment method not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Payment method not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  getAuthenticatedUserInquiries: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of Bookings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inquiry"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createInquiry: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateInquiryRequest"];
      };
    };
    responses: {
      /** @description Returns the created Inquiry */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inquiry"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findLatestSentInquiryByListingId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns an inquiry */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inquiry"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  getInquiryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inquiryId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns an inquiry */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Inquiry"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteInquiryById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        inquiryId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No return value */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findBookingsByAccountId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of Bookings belonging to the given account */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Booking"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findBookings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of Bookings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Booking"][];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findHostBookings: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        hostId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns all the bookings belonging to a host */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Booking"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findBookingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        bookingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a the booking with the given ID */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Booking"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  updateBookingState: {
    parameters: {
      query: {
        action: components["schemas"]["UpdateBookingAction"];
      };
      header?: never;
      path: {
        bookingId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No return value */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  bookListingIdByAccountId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        accountId: number;
        listingId: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["BookingDetails"];
      };
    };
    responses: {
      /** @description Returns a list of Bookings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Booking"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findFeedbacks: {
    parameters: {
      query?: {
        feedbackIds?: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns a list of feedbacks */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Feedback"][];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createFeedback: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFeedbackRequest"];
      };
    };
    responses: {
      /** @description Created feedback */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Feedback"];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteFeedbacks: {
    parameters: {
      query: {
        feedbackIds: number[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Feedback(s) deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  searchFeedbacks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FeedbackSearchRequest"];
      };
    };
    responses: {
      /** @description List of feedbacks */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Feedback"][];
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  createMessage: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        recipientId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMessageRequest"];
      };
    };
    responses: {
      /** @description Created message */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description sender or recipient not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findConversationsByUserId: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of conversations for the user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Conversation"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Payment method not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  archiveConversationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conversationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Conversation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  unarchiveConversationById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conversationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Conversation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  addMessageToConversation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conversationId: number;
        recipientId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMessageRequest"];
      };
    };
    responses: {
      /** @description Created message */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description sender or recipient not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  findMessagesByConversationId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conversationId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Conversation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  deleteMessageById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        conversationId: number;
        messageId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Nothing */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description User is not authorized to access this resource */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Message or conversation not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
      /** @description Unknown error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
}
export enum AccountStatus {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
  DELETED = "DELETED",
  SUSPENDED = "SUSPENDED",
}
export enum AccountRole {
  ADMIN = "ADMIN",
  HOST = "HOST",
  GUEST = "GUEST",
}
export enum GovernmentIdStatusEnum {
  PENDING = "PENDING",
  APPROVED = "APPROVED",
  REJECTED = "REJECTED",
}
export enum ListingState {
  DRAFT = "DRAFT",
  PUBLISHED = "PUBLISHED",
  UNLISTED = "UNLISTED",
  DELETED = "DELETED",
}
export enum CalendarType {
  SYSTEM = "SYSTEM",
  CONNECTED = "CONNECTED",
}
export enum AvailabilityState {
  OPEN = "OPEN",
  BOOKED = "BOOKED",
  BLOCKED = "BLOCKED",
  RESERVED = "RESERVED",
}
export enum SortDirection {
  ASC = "ASC",
  DESC = "DESC",
}
export enum PaymentMethod {
  PAYPAL = "PAYPAL",
  CARD = "CARD",
}
export enum PaypalDetailsMethod {
  PAYPAL = "PAYPAL",
}
export enum CardDetailsMethod {
  CARD = "CARD",
}
export enum UpdateBookingAction {
  cancel = "cancel",
  reject = "reject",
  confirm = "confirm",
}
export enum BookingStatus {
  CREATED = "CREATED",
  EXPIRED = "EXPIRED",
  CONFIRMED = "CONFIRMED",
  CANCELLED = "CANCELLED",
  REJECTED = "REJECTED",
  PAYMENT_APPROVED = "PAYMENT_APPROVED",
  PAYMENT_FAILED = "PAYMENT_FAILED",
}
export enum InquiryStatusEnum {
  CREATED = "CREATED",
  SENT = "SENT",
  BOOKED = "BOOKED",
  CANCELLED = "CANCELLED",
}
export enum FeedbackType {
  REVIEW = "REVIEW",
  REPORT = "REPORT",
}
export enum EntityType {
  LISTING = "LISTING",
  USER = "USER",
}
export enum ReportStatus {
  OPEN = "OPEN",
  RESOLVED = "RESOLVED",
  DISMISSED = "DISMISSED",
  CONFIRMED = "CONFIRMED",
}
export enum ConversationTypeEnum {
  SUPPORT = "SUPPORT",
  USER_INTERACTION = "USER_INTERACTION",
}
export enum MessageContextTypeEnum {
  SUPPORT = "SUPPORT",
  INQUIRY = "INQUIRY",
}
